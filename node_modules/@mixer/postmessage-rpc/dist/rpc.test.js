"use strict";
// import { expect } from 'chai';
Object.defineProperty(exports, "__esModule", { value: true });
var error_1 = require("./error");
var marbles_test_1 = require("./marbles.test");
var makeReply = function (id, counter, result) { return ({
    data: {
        type: 'reply',
        serviceID: 'foo',
        counter: counter,
        id: id,
        result: result,
    },
    origin: 'example.com',
}); };
var makeCall = function (id, counter, method, params, discard) {
    if (discard === void 0) { discard = false; }
    return ({
        data: {
            type: 'method',
            serviceID: 'foo',
            discard: discard,
            method: method,
            counter: counter,
            id: id,
            params: params,
        },
        origin: 'example.com',
    });
};
var expectReady = {
    action: 2 /* Receive */,
    object: {
        type: 'method',
        method: 'ready',
        discard: false,
        id: -1,
        serviceID: 'foo',
        counter: 0,
        params: {
            protocolVersion: '1.0',
        },
    },
};
describe('RPC', function () {
    it('says it is ready if it gets a ready reply', function () {
        return marbles_test_1.testMarbles({
            rpcInstance: 'a--de',
            remoteContx: '-bc--',
            definitions: {
                a: { action: 3 /* IsReady */, value: false },
                b: expectReady,
                c: {
                    action: 0 /* Send */,
                    data: makeReply(-1, 0, {
                        protocolVersion: '1.0',
                    }),
                },
                d: {
                    action: 2 /* Receive */,
                    subset: {
                        type: 'reply',
                        result: {
                            protocolVersion: '1.0',
                        },
                    },
                },
                e: { action: 3 /* IsReady */, value: true },
            },
        });
    });
    it('says it is ready if it gets a ready event later', function () {
        return marbles_test_1.testMarbles({
            rpcInstance: 'a--de',
            remoteContx: '-bc--',
            definitions: {
                a: { action: 3 /* IsReady */, value: false },
                b: expectReady,
                c: {
                    action: 0 /* Send */,
                    data: makeCall(0, 0, 'ready', {
                        protocolVersion: '1.0',
                    }, true),
                },
                d: {
                    action: 2 /* Receive */,
                    subset: {
                        type: 'method',
                        method: 'ready',
                        params: {
                            protocolVersion: '1.0',
                        },
                    },
                },
                e: { action: 3 /* IsReady */, value: true },
            },
        });
    });
    it('does not break on an empty/errorful ready reply (back compat)', function () {
        return marbles_test_1.testMarbles({
            rpcInstance: 'a--de',
            remoteContx: '-bc--',
            definitions: {
                a: { action: 3 /* IsReady */, value: false },
                b: expectReady,
                c: {
                    action: 0 /* Send */,
                    data: makeReply(-1, 0, null),
                },
                d: {
                    action: 2 /* Receive */,
                    subset: {
                        type: 'reply',
                        id: -1,
                        result: null,
                    },
                },
                e: { action: 3 /* IsReady */, value: true },
            },
        });
    });
    it('should reject methods from invalid service IDs', function () {
        return marbles_test_1.testMarbles({
            rpcInstance: '---',
            remoteContx: 'ab-',
            definitions: {
                a: expectReady,
                b: {
                    action: 0 /* Send */,
                    data: {
                        data: {
                            type: 'method',
                            method: 'ready',
                            serviceID: 'wut',
                            counter: 0,
                        },
                        origin: 'example.com',
                    },
                },
            },
        });
    });
    it('should reject methods from invalid origins', function () {
        return marbles_test_1.testMarbles({
            rpcInstance: '---',
            remoteContx: 'ab-',
            definitions: {
                a: expectReady,
                b: {
                    action: 0 /* Send */,
                    data: {
                        data: {
                            type: 'method',
                            method: 'ready',
                            serviceID: 'foo',
                            counter: 0,
                        },
                        origin: 'wut.com',
                    },
                },
            },
        });
    });
    it('should reject malformed messages', function () {
        return marbles_test_1.testMarbles({
            rpcInstance: '---',
            remoteContx: 'ab-',
            definitions: {
                a: expectReady,
                b: {
                    action: 0 /* Send */,
                    data: {
                        data: {
                            potato: true,
                        },
                        origin: 'example.com',
                    },
                },
            },
        });
    });
    it('should make calls and receive+reorder replies', function () {
        return marbles_test_1.testMarbles({
            rpcInstance: '-bcd---hij',
            remoteContx: 'a---efg--',
            definitions: {
                a: expectReady,
                b: {
                    action: 0 /* Send */,
                    method: 'firstMethod',
                    data: {},
                },
                c: {
                    action: 0 /* Send */,
                    method: 'secondMethod',
                    data: {},
                },
                d: {
                    action: 0 /* Send */,
                    method: 'thirdMethod',
                    data: {},
                },
                e: {
                    action: 0 /* Send */,
                    data: makeReply(3, 2, 'thirdReply'),
                },
                f: {
                    action: 0 /* Send */,
                    data: makeReply(2, 1, 'secondReply'),
                },
                g: {
                    action: 0 /* Send */,
                    data: makeReply(1, 0, 'firstReply'),
                },
                h: {
                    action: 2 /* Receive */,
                    subset: { result: 'firstReply' },
                },
                i: {
                    action: 2 /* Receive */,
                    subset: { result: 'secondReply' },
                },
                j: {
                    action: 2 /* Receive */,
                    subset: { result: 'thirdReply' },
                },
            },
        });
    });
    it('should bubble any returned rpc errors', function () {
        return marbles_test_1.testMarbles({
            rpcInstance: '--c-',
            remoteContx: 'ab-d',
            handlers: {
                bar: function () {
                    throw new error_1.RPCError(1234, 'oh no!');
                },
            },
            definitions: {
                a: expectReady,
                b: { action: 0 /* Send */, data: makeCall(0, 0, 'bar', null) },
                c: {
                    action: 2 /* Receive */,
                    subset: { method: 'bar' },
                },
                d: {
                    action: 2 /* Receive */,
                    subset: {
                        error: { code: 1234, message: 'oh no!' },
                    },
                },
            },
        });
    });
    it('should error on unknown methods', function () {
        return marbles_test_1.testMarbles({
            rpcInstance: '--c-',
            remoteContx: 'ab-d',
            definitions: {
                a: expectReady,
                b: { action: 0 /* Send */, data: makeCall(0, 0, 'bar', null) },
                c: {
                    action: 2 /* Receive */,
                    subset: { method: 'bar' },
                },
                d: {
                    action: 2 /* Receive */,
                    subset: {
                        error: { code: 4003, message: 'Unknown method name "bar"' },
                    },
                },
            },
        });
    });
    it('should reset call counter when ready is received', function () {
        return marbles_test_1.testMarbles({
            rpcInstance: '-b--ef--',
            remoteContx: 'a-cd--gh',
            definitions: {
                a: expectReady,
                b: {
                    action: 0 /* Send */,
                    method: 'hello',
                    data: true,
                },
                c: {
                    action: 2 /* Receive */,
                    subset: { method: 'hello', counter: 1 },
                },
                d: {
                    action: 0 /* Send */,
                    data: makeCall(-1, 0, 'ready', {
                        protocolVersion: '1.0',
                    }),
                },
                e: expectReady,
                f: {
                    action: 0 /* Send */,
                    method: 'helloAgain',
                    data: true,
                },
                g: {
                    action: 2 /* Receive */,
                    subset: { type: 'reply', id: -1, counter: 0 },
                },
                h: {
                    action: 2 /* Receive */,
                    subset: { type: 'method', counter: 1 },
                },
            },
        });
    });
});
