"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var rpc_1 = require("./rpc");
// tslint:disable-next-line
chai_1.use(require('chai-subset'));
/**
 * Function that returns a delay of the requested number of milliseconds.
 */
exports.delay = function (duration) {
    if (duration === void 0) { duration = 1; }
    return new Promise(function (resolve) { return setTimeout(resolve, duration); });
};
function testMethod(charDef, def, message) {
    if (def.action !== 2 /* Receive */) {
        return;
    }
    if (!message) {
        throw new Error("Expected to get reply for definition " + charDef + ", but we didn't");
    }
    if ('subset' in def) {
        chai_1.expect(message).to.containSubset(def.subset);
    }
    else if ('object' in def) {
        chai_1.expect(message).to.deep.equal(def.object, "expected objects in def " + charDef + " to be equal");
    }
    else {
        def.tester(message);
    }
}
/**
 * rxjs-style marble sequence tests.
 */
function testMarbles(_a) {
    var rpcInstance = _a.rpcInstance, remoteContx = _a.remoteContx, definitions = _a.definitions, handlers = _a.handlers;
    return __awaiter(this, void 0, void 0, function () {
        var messagesSentToRemote, messagesReceivedByRPC, sendMessage, toreDown, isReady, rpc, _i, _b, key, i, def, def;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    messagesSentToRemote = [];
                    messagesReceivedByRPC = [];
                    sendMessage = null;
                    toreDown = false;
                    isReady = false;
                    rpc = new rpc_1.RPC({
                        target: { postMessage: function (data) { return messagesSentToRemote.push(JSON.parse(data)); } },
                        receiver: {
                            readMessages: function (callback) {
                                sendMessage = function (event) { return callback({ data: JSON.stringify(event.data), origin: event.origin }); };
                                return function () { return (toreDown = true); };
                            },
                        },
                        origin: 'example.com',
                        serviceId: 'foo',
                    });
                    rpc.on('recvData', function (p) { return messagesReceivedByRPC.push(p); });
                    rpc.on('isReady', function () { return (isReady = true); });
                    while (rpcInstance.length < remoteContx.length) {
                        rpcInstance += '-';
                    }
                    while (remoteContx.length < rpcInstance.length) {
                        remoteContx += '-';
                    }
                    if (handlers) {
                        for (_i = 0, _b = Object.keys(handlers); _i < _b.length; _i++) {
                            key = _b[_i];
                            rpc.expose(key, handlers[key]);
                        }
                    }
                    i = 0;
                    _c.label = 1;
                case 1:
                    if (!(i < rpcInstance.length)) return [3 /*break*/, 4];
                    if (rpcInstance[i] !== '-') {
                        def = definitions[rpcInstance[i]];
                        if (!def) {
                            throw new Error("Unknown action " + rpcInstance[i]);
                        }
                        if (def.action === 0 /* Send */) {
                            rpc.call(def.method, def.data, false);
                        }
                        else if (def.action === 2 /* Receive */) {
                            testMethod(rpcInstance[i], def, messagesReceivedByRPC.shift());
                        }
                        else if (def.action === 3 /* IsReady */) {
                            chai_1.expect(isReady).to.equal(def.value, "expected the rpc.ready=" + def.value + " by " + rpcInstance[i] + ", but it was not");
                        }
                    }
                    if (remoteContx[i] !== '-') {
                        def = definitions[remoteContx[i]];
                        if (!def) {
                            throw new Error("Unknown action " + remoteContx[i]);
                        }
                        if (def.action === 0 /* Send */) {
                            sendMessage(def.data);
                        }
                        else {
                            testMethod(rpcInstance[i], def, messagesSentToRemote.shift());
                        }
                    }
                    return [4 /*yield*/, exports.delay()];
                case 2:
                    _c.sent();
                    _c.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4:
                    rpc.destroy();
                    chai_1.expect(toreDown).to.be.true;
                    return [2 /*return*/];
            }
        });
    });
}
exports.testMarbles = testMarbles;
