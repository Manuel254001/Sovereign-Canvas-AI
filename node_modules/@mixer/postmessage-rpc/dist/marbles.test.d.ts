import { RPCMessage } from './types';
/**
 * Function that returns a delay of the requested number of milliseconds.
 */
export declare const delay: (duration?: number) => Promise<{}>;
/**
 * Action defines the assertion to run in the test definition
 */
export declare const enum Action {
    Send = 0,
    Handler = 1,
    Receive = 2,
    IsReady = 3,
}
/**
 * Definition is passed to the IMarbleTest to define what checks to run
 * at each point. In order:
 *
 *  1. Send a method. From the RPC, it should have a method name and body.
 *  2. Asserts that the RPC is in the ready state at the given time.
 *  3. Asserts that we receive something that matches the given subset
 *  4. Asserts that we receive something that deep equals the given object
 *  5. Asserts that we receive something, and passes the message to the test
 *     function.
 */
export declare type Definition = {
    action: Action.Send;
    method?: string;
    data: any;
} | {
    action: Action.IsReady;
    value: boolean;
} | {
    action: Action.Receive;
    subset: any;
} | {
    action: Action.Receive;
    object: any;
} | {
    action: Action.Receive;
    tester: (r: RPCMessage<any>) => void;
};
/**
 * Options passed into testMarbles.
 */
export interface IMarbleTest {
    /**
     * Marble test for RPC instance. E.g. `--a-b-c`. Dashes are "no ops",
     * letters match up to assertions in the `definitions` object.
     */
    rpcInstance: string;
    /**
     * Marble test for "remote window". E.g. `--a-b-c`. Dashes are "no ops",
     * letters match up to assertions in the `definitions` object.
     */
    remoteContx: string;
    /**
     * Assertions matching up to the marble test.
     */
    definitions: {
        [char: string]: Definition;
    };
    /**
     * Handler methods to attach to the marbles.
     */
    handlers?: {
        [method: string]: (data: any) => any;
    };
}
/**
 * rxjs-style marble sequence tests.
 */
export declare function testMarbles({rpcInstance, remoteContx, definitions, handlers}: IMarbleTest): Promise<void>;
