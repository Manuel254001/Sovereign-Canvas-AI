{"version":3,"sources":["../src/popup.ts"],"sourcesContent":["import { LitElement, html, css, type PropertyDeclarations } from 'lit'\n\n/**\n * Small lit component to work on popup.\n * This is not being called quite yet but will be the way to support\n * the popup in the future.\n */\nexport class ModalPopup extends LitElement {\n  static styles = css`\n    .modal {\n      display: none;\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background-color: rgba(0, 0, 0, 0.5);\n      justify-content: center;\n      align-items: center;\n    }\n    .modal.show {\n      display: flex;\n    }\n    .modal-content {\n      background-color: #fff;\n      border-radius: 8px;\n      overflow: hidden;\n      position: relative;\n      /* Default size for larger screens */\n      width: 480px;\n      height: 640px;\n      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);\n    }\n    /* Fullscreen iframe for mobile devices */\n    @media (max-width: 768px) {\n      .modal-content {\n        width: 100%;\n        height: 100%;\n        border-radius: 0; /* Remove rounded corners on mobile */\n      }\n    }\n    .close-button {\n      position: absolute;\n      top: 10px;\n      right: 15px;\n      font-size: 24px;\n      cursor: pointer;\n      z-index: 10;\n    }\n    iframe {\n      width: 100%;\n      height: 100%;\n      border: none;\n    }\n  `\n\n  static properties: PropertyDeclarations = {\n    isOpen: { type: Boolean },\n    iframeSrc: { type: String },\n  }\n\n  isOpen = false\n  iframeSrc = ''\n\n  private iframeElement: HTMLIFrameElement | null | undefined\n\n  render() {\n    return html`\n      <div class=\"modal ${this.isOpen ? 'show' : ''}\">\n        <div class=\"modal-content\">\n          <span class=\"close-button\" @click=\"${this.closeModal}\">&times;</span>\n          <iframe src=\"about:blank\"></iframe>\n        </div>\n      </div>\n    `\n  }\n\n  handleIframeLoad = () => {\n    const { contentWindow } = (this.iframeElement || {}) as HTMLIFrameElement\n    this.resolve?.(contentWindow)\n  }\n\n  handleIframeError = (e: ErrorEvent) => {\n    this.reject?.(e.error)\n    this.closeModal()\n  }\n\n  private resolve?: (window: Window | null) => void\n  private reject?: (error: Error) => void\n\n  async openModal(url: string): Promise<Window | null> {\n    const defer = new Promise<Window | null>((resolve, reject) => {\n      this.resolve = resolve\n      this.reject = reject\n    })\n    this.iframeSrc = url\n    this.isOpen = true\n\n    if (this.iframeElement) {\n      this.iframeElement.src = url\n    }\n    return defer\n  }\n\n  firstUpdated() {\n    this.iframeElement = this.renderRoot.querySelector('iframe') as HTMLIFrameElement\n    if (this.iframeElement) {\n      this.iframeElement.addEventListener('load', this.handleIframeLoad)\n      this.iframeElement.addEventListener('error', this.handleIframeError)\n\n      if (this.iframeSrc) {\n        this.iframeElement.src = this.iframeSrc\n      }\n    }\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback()\n    // Clean up event listeners\n    if (this.iframeElement) {\n      this.iframeElement.removeEventListener('load', this.handleIframeLoad)\n      this.iframeElement.removeEventListener('error', this.handleIframeError)\n      this.iframeElement = null\n    }\n  }\n\n  closeModal() {\n    this.isOpen = false\n    this.iframeSrc = ''\n  }\n}\n\nexport function createWalletPopup(): ModalPopup | null {\n  if (typeof window === 'undefined' || typeof document === 'undefined' || typeof customElements === 'undefined') {\n    return null\n  }\n  // Manually register the custom element\n  if (!customElements.get('up-wallet-popup')) {\n    customElements.define('up-wallet-popup', ModalPopup)\n  }\n  const existingPopup: ModalPopup | null = (document.querySelector('up-wallet-popup') || null) as ModalPopup | null\n  if (existingPopup) {\n    return existingPopup\n  }\n  const popup = document.createElement('up-wallet-popup') as ModalPopup\n  document.body.appendChild(popup)\n  return popup\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAiE;AAO1D,IAAM,aAAN,cAAyB,sBAAW;AAAA,EAApC;AAAA;AAsDL,kBAAS;AACT,qBAAY;AAeZ,4BAAmB,MAAM;AACvB,YAAM,EAAE,cAAc,IAAK,KAAK,iBAAiB,CAAC;AAClD,WAAK,UAAU,aAAa;AAAA,IAC9B;AAEA,6BAAoB,CAAC,MAAkB;AACrC,WAAK,SAAS,EAAE,KAAK;AACrB,WAAK,WAAW;AAAA,IAClB;AAAA;AAAA,EAnBA,SAAS;AACP,WAAO;AAAA,0BACe,KAAK,SAAS,SAAS,EAAE;AAAA;AAAA,+CAEJ,KAAK,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,EAK5D;AAAA,EAeA,MAAM,UAAU,KAAqC;AACnD,UAAM,QAAQ,IAAI,QAAuB,CAAC,SAAS,WAAW;AAC5D,WAAK,UAAU;AACf,WAAK,SAAS;AAAA,IAChB,CAAC;AACD,SAAK,YAAY;AACjB,SAAK,SAAS;AAEd,QAAI,KAAK,eAAe;AACtB,WAAK,cAAc,MAAM;AAAA,IAC3B;AACA,WAAO;AAAA,EACT;AAAA,EAEA,eAAe;AACb,SAAK,gBAAgB,KAAK,WAAW,cAAc,QAAQ;AAC3D,QAAI,KAAK,eAAe;AACtB,WAAK,cAAc,iBAAiB,QAAQ,KAAK,gBAAgB;AACjE,WAAK,cAAc,iBAAiB,SAAS,KAAK,iBAAiB;AAEnE,UAAI,KAAK,WAAW;AAClB,aAAK,cAAc,MAAM,KAAK;AAAA,MAChC;AAAA,IACF;AAAA,EACF;AAAA,EAEA,uBAAuB;AACrB,UAAM,qBAAqB;AAE3B,QAAI,KAAK,eAAe;AACtB,WAAK,cAAc,oBAAoB,QAAQ,KAAK,gBAAgB;AACpE,WAAK,cAAc,oBAAoB,SAAS,KAAK,iBAAiB;AACtE,WAAK,gBAAgB;AAAA,IACvB;AAAA,EACF;AAAA,EAEA,aAAa;AACX,SAAK,SAAS;AACd,SAAK,YAAY;AAAA,EACnB;AACF;AA3Ha,WACJ,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADL,WAiDJ,aAAmC;AAAA,EACxC,QAAQ,EAAE,MAAM,QAAQ;AAAA,EACxB,WAAW,EAAE,MAAM,OAAO;AAC5B;AAyEK,SAAS,oBAAuC;AACrD,MAAI,OAAO,WAAW,eAAe,OAAO,aAAa,eAAe,OAAO,mBAAmB,aAAa;AAC7G,WAAO;AAAA,EACT;AAEA,MAAI,CAAC,eAAe,IAAI,iBAAiB,GAAG;AAC1C,mBAAe,OAAO,mBAAmB,UAAU;AAAA,EACrD;AACA,QAAM,gBAAoC,SAAS,cAAc,iBAAiB,KAAK;AACvF,MAAI,eAAe;AACjB,WAAO;AAAA,EACT;AACA,QAAM,QAAQ,SAAS,cAAc,iBAAiB;AACtD,WAAS,KAAK,YAAY,KAAK;AAC/B,SAAO;AACT;","names":[]}