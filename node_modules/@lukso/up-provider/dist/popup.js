"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/popup.ts
var popup_exports = {};
__export(popup_exports, {
  ModalPopup: () => ModalPopup,
  createWalletPopup: () => createWalletPopup
});
module.exports = __toCommonJS(popup_exports);
var import_lit = require("lit");
var ModalPopup = class extends import_lit.LitElement {
  constructor() {
    super(...arguments);
    this.isOpen = false;
    this.iframeSrc = "";
    this.handleIframeLoad = () => {
      const { contentWindow } = this.iframeElement || {};
      this.resolve?.(contentWindow);
    };
    this.handleIframeError = (e) => {
      this.reject?.(e.error);
      this.closeModal();
    };
  }
  render() {
    return import_lit.html`
      <div class="modal ${this.isOpen ? "show" : ""}">
        <div class="modal-content">
          <span class="close-button" @click="${this.closeModal}">&times;</span>
          <iframe src="about:blank"></iframe>
        </div>
      </div>
    `;
  }
  async openModal(url) {
    const defer = new Promise((resolve, reject) => {
      this.resolve = resolve;
      this.reject = reject;
    });
    this.iframeSrc = url;
    this.isOpen = true;
    if (this.iframeElement) {
      this.iframeElement.src = url;
    }
    return defer;
  }
  firstUpdated() {
    this.iframeElement = this.renderRoot.querySelector("iframe");
    if (this.iframeElement) {
      this.iframeElement.addEventListener("load", this.handleIframeLoad);
      this.iframeElement.addEventListener("error", this.handleIframeError);
      if (this.iframeSrc) {
        this.iframeElement.src = this.iframeSrc;
      }
    }
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    if (this.iframeElement) {
      this.iframeElement.removeEventListener("load", this.handleIframeLoad);
      this.iframeElement.removeEventListener("error", this.handleIframeError);
      this.iframeElement = null;
    }
  }
  closeModal() {
    this.isOpen = false;
    this.iframeSrc = "";
  }
};
ModalPopup.styles = import_lit.css`
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      justify-content: center;
      align-items: center;
    }
    .modal.show {
      display: flex;
    }
    .modal-content {
      background-color: #fff;
      border-radius: 8px;
      overflow: hidden;
      position: relative;
      /* Default size for larger screens */
      width: 480px;
      height: 640px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
    }
    /* Fullscreen iframe for mobile devices */
    @media (max-width: 768px) {
      .modal-content {
        width: 100%;
        height: 100%;
        border-radius: 0; /* Remove rounded corners on mobile */
      }
    }
    .close-button {
      position: absolute;
      top: 10px;
      right: 15px;
      font-size: 24px;
      cursor: pointer;
      z-index: 10;
    }
    iframe {
      width: 100%;
      height: 100%;
      border: none;
    }
  `;
ModalPopup.properties = {
  isOpen: { type: Boolean },
  iframeSrc: { type: String }
};
function createWalletPopup() {
  if (typeof window === "undefined" || typeof document === "undefined" || typeof customElements === "undefined") {
    return null;
  }
  if (!customElements.get("up-wallet-popup")) {
    customElements.define("up-wallet-popup", ModalPopup);
  }
  const existingPopup = document.querySelector("up-wallet-popup") || null;
  if (existingPopup) {
    return existingPopup;
  }
  const popup = document.createElement("up-wallet-popup");
  document.body.appendChild(popup);
  return popup;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ModalPopup,
  createWalletPopup
});
//# sourceMappingURL=popup.js.map